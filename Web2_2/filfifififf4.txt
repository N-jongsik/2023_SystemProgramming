#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>
#include <fnmatch.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <fcntl.h>

#define URL_LEN 256
#define BUFSIZE 1024
#define PORTNO 40000

// char temp[1000000] = {
//     0,
// }; // temporary store response message

void file_info(char response_message[BUFSIZE],int lfalg, int aflag, char *argv, int k, struct stat buf[], char *file[]); // define file info function about directory
void bubble_sort(char **file, int n, struct stat buf[]);                                  // define bubble sort
void ls_l(char response_message[BUFSIZE],char *argv, DIR *dirp, struct dirent *entry, char **file);                      // define ls -l function
void ls_al(char response_message[BUFSIZE],char *argv, DIR *dirp, struct dirent *entry, char **file);                     // define ls -al function

int main()
{
    struct sockaddr_in server_addr, client_addr; //server address, client address
    int socket_fd, client_fd; //socket descriptor, client descriptor
    int len, len_out;
    int opt = 1;
    char cwd[4096];// get current directory
 
    int total = 0; //total size
    int byte_read; //return read function
    int i = 0; 
    int file_fd; //file descriptor

    DIR *dirp;             // pointer to directory stream
    struct dirent *entry;  // Pointer to a dirent structure
    char *file[4096];      // file list
    struct stat buf[4096]; // stat structure that stores information about a file or directory

    char MIME_type[1024]; //check MIME_type

    if ((socket_fd = socket(PF_INET, SOCK_STREAM, 0)) < 0) //Call the socket function to create a socket file descriptor
    {
        printf("Server : Can't open stream socket\n"); //exception
        return 0;
    }
    setsockopt(socket_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)); //to enable reuse of previously used port numbers

    memset(&server_addr, 0, sizeof(server_addr)); //Initialize server_addr structure
    server_addr.sin_family = AF_INET; 
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY); //Accept client's connection request
    server_addr.sin_port = htons(PORTNO);

    if (bind(socket_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
    {
        printf("Server : Can't bind local address\n"); //exception
        return 0;
    }
    listen(socket_fd, 5);

    while (1)
    {
        struct in_addr inet_client_address;
        char buf[BUFSIZE] = {
            0,
        }; //
        char tmp[BUFSIZE] = {
            0,
        };
        char response_header[BUFSIZE] = {
            0,
        }; //response header
        char response_message[BUFSIZE] = {
            0,
        }; //response message
        char url[URL_LEN] = {
            0,
        }; //url
        char method[20] = {
            0,
        }; //method
        char *tok = NULL;
    
        len = sizeof(client_addr); //size of client address
        client_fd = accept(socket_fd, (struct sockaddr *)&client_addr, &len); //to get the socket file descriptor associated with the client
        if (client_fd < 0)
        {
            printf("Server : accept failed\n"); //exception
            return 0;
        }

        inet_client_address.s_addr = client_addr.sin_addr.s_addr; //store ip address
        printf("[%s : %d] client was connected\n", inet_ntoa(inet_client_address), client_addr.sin_port);
        byte_read = read(client_fd, buf, BUFSIZE);
        if (byte_read == 0) ////exception client was connected
        {
            printf("[%s : %d] client was disconnected\n", inet_ntoa(inet_client_address), client_addr.sin_port);
            continue;
        }
        strcpy(tmp, buf); //tmp<-buf
        puts("===========================");
        printf("Request from [%s : %d]\n", inet_ntoa(inet_client_address), client_addr.sin_port);
        puts(buf);
        puts("===========================");

        tok = strtok(tmp, " ");
        strcpy(method, tok); //Copy HTTP method information
        if (strcmp(method, "GET") == 0) //when HTTP method == "GET"
        {
            tok = strtok(NULL, " ");  
            strcpy(url, tok); //Copy url information
        }

        char wow[4096] = {0, };
        getcwd(cwd, sizeof(cwd)); // get current working directory
        sprintf(wow, "%s%s", cwd, url); //wow=cwd+url

        struct stat check_buf;
        int exsist_file = lstat(wow,&check_buf); 
        
        if (opendir(wow)) //open directory
        {
            if (strcmp(url, "/") == 0)
            {
                ls_l(response_message,url, dirp, entry, file); // call ls -l function
            }
            else
            {
                ls_al(response_message,url, dirp, entry, file); // call ls -al function
            }
        }

        else if (!opendir(wow)) //not directory
        {
           if (access(wow, F_OK) >= -1) //no exsist file
            {
                sprintf(response_message, "<h3><br>Not Found</br></h3>The request URL %s was not found on this server<p>HTTP 404 -Page Not Found</p>", url); //print 404 error
            }
        }
        

        lstat(wow,&check_buf); //get file info
        //long size; //lont type size
        int read_size = 0; //to return read value
        int flag;
  
        if (S_ISDIR(check_buf.st_mode)) //when directory
        {
            // strcpy(MIME_type, "text/html"); //MIME_type=text/html
            // size=strlen(response_message); //get size of response message
            // flag = 0;
            // strcpy(response_message, temp); //response message=temp
            // memset(temp, 0, sizeof(temp)); //initailize temp
            // sprintf(response_header, "HTTP/1.0 200 OK\r\n"
            //                      "Server:2023 simple web server \r\n"
            //                      "Content-length:%lu\r\n"
            //                      "Content-type:%s\r\n\r\n",
            //                     size, MIME_type); //print response header
        
            // write(client_fd, response_header, strlen(response_header)); //write response header
            // write(client_fd, response_message, strlen(response_message)); //write response message

            // printf("[%s : %d] client was disconnected\n", inet_ntoa(inet_client_address), client_addr.sin_port); //print the client's IP address and port number
            // close(client_fd); //close client socket descriptor

            if ((dirp = opendir(wow)) != NULL) // open directory
            {
                while ((entry = readdir(dirp)) != NULL) // read directory
                {
                    if (entry->d_name[0] == '.') // do not print hidden files
                    {
                        continue;
                    }
                    else
                    {
                        file[i] = entry->d_name; // store file names
                        i++;
                    }
                }
            }
            // char buffer[BUFSIZE] = {0, };
            // FILE* files = fopen(wow, "rb");
            // fseek(files, 0, SEEK_END);
            // long int size = ftell(files);
            // fseek(files, 0, SEEK_SET);

            // strcpy(response_message, temp); //response message=temp
            // memset(temp, 0, sizeof(temp)); //initailize temp
            // strcpy(MIME_type, "text/html"); //MIME_type=image/*
            //size=check_buf.st_size; //get file size
            // file_fd=open(wow,O_RDONLY); //file open
            // read_size = read(file_fd, response_message, BUFSIZE); //file read
            // flag = 1;

            // sprintf(response_header, "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nContent-Length:%ld\r\n\r\n",strlen(response_message));//save message
            // write(client_fd, response_header, strlen(response_header)); //write
            // printf("strlen:%ld\n",strlen(response_message));
            // printf("size:%ld\n",size);
            // int num_read = 0;
            // while ((num_read = fread(buffer, 1, BUFSIZE, files)) > 0) {
            //    write(client_fd, buffer, strlen(response_message));
            // }
            // printf("why so serious\n");
            // fclose(files); 
            // close(client_fd);
        }
        else if((fnmatch("*.jpg",wow, FNM_CASEFOLD)==0)||
        (fnmatch("*.png",wow, FNM_CASEFOLD)==0)||
        (fnmatch("*.jpeg",wow, FNM_CASEFOLD)==0)) //when image file
        {
            char buffer[BUFSIZE] = {0, };
            FILE* files = fopen(wow, "rb");
            
            fseek(files, 0, SEEK_END);
            long int size = ftell(files);
            fseek(files, 0, SEEK_SET);

            sprintf(response_header, "HTTP/1.1 200 OK\r\nContent-Type: image/*\r\nContent-Length:%ld\r\n\r\n",size);//save message
            write(client_fd, response_header, strlen(response_header)); //write

            int num_read = 0;
            while ((num_read = fread(buffer, 1, BUFSIZE, files)) > 0) {
               write(client_fd, buffer, num_read);
            }
            printf("[%s : %d] client was disconnected\n", inet_ntoa(inet_client_address), client_addr.sin_port); //print the client's IP address and port number
            fclose(files); 
            close(client_fd);
        }

        else if (S_ISREG(check_buf.st_mode)) //when file
        {
            char buffer[BUFSIZE] = {0, };
            FILE* files = fopen(wow, "rb");
            
            fseek(files, 0, SEEK_END);
            long int size = ftell(files);
            fseek(files, 0, SEEK_SET);

            sprintf(response_header, "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length:%ld\r\n\r\n",size);//save message
            write(client_fd, response_header, strlen(response_header)); //write

            int num_read = 0;
            while ((num_read = fread(buffer, 1, BUFSIZE, files)) > 0) {
               write(client_fd, buffer, num_read);
            }
            printf("[%s : %d] client was disconnected\n", inet_ntoa(inet_client_address), client_addr.sin_port); //print the client's IP address and port number
            fclose(files); 
            close(client_fd);
        }  
        
        // if(flag == 0) //when not image file
        // {
        //     strcpy(response_message, temp); //response message=temp
        // }
        // memset(temp, 0, sizeof(temp)); //initailize temp
        // sprintf(response_header, "HTTP/1.0 200 OK\r\n"
        //                          "Server:2023 simple web server \r\n"
        //                          "Content-length:%lu\r\n"
        //                          "Content-type:%s\r\n\r\n",
        //                         size, MIME_type); //print response header
        
        // write(client_fd, response_header, strlen(response_header)); //write response header

        // if(flag == 1) //when image file
        // {
        //     write(client_fd, response_message, read_size); //write response message
        //     flag = 0;
        // }
        // else if(flag == 0) //when not image file
        // {
        //     write(client_fd, response_message, strlen(response_message)); //write response message
        // }
        
        // printf("[%s : %d] client was disconnected\n", inet_ntoa(inet_client_address), client_addr.sin_port); //print the client's IP address and port number
        // close(file_fd); //close file descriptor
        // close(client_fd); //close client socket descriptor
    }
    close(socket_fd); //close socket descriptor
    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////
// file_info                                                                            //
//-------------------------------------------------------                              //
// Input:int k: the number of files, struct stat: get file information                  //
//           char* file[]:file list int argc:store the number of input arguments        //
//           struct passwd *:get user info struct group *:get group info                //
//           struct tm*:get time info                                                   //
// Purpose:print directory's more information                                           //
/////////////////////////////////////////////////////////////////////////////////////////
void file_info(char response_message[BUFSIZE],int lflag, int aflag, char *argv, int k, struct stat buf[], char *file[]) // define file info function about directory
{
    char permission[] = "----------";                                                                     // initialize permission array
    char *Month[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}; // initialize month array
    int n;                                                                                                // initialize value
    char cwd[4096];

    struct passwd *pw; //passwd structure
    struct group *grp; //group stucture
    struct tm *time; //time structure
    getcwd(cwd, 4096); // get current directory

    sprintf(response_message,"%s<title>%s</title>",response_message,cwd); //print title current directory
    sprintf(response_message, "%s<table border=\"1\">", response_message); // make table
    sprintf(response_message, "%s<tr><th>Name</th><th>Permission</th><th>Link</th><th>Owner</th><th>Group</th><th>Size</th><th>Last Modified</th></tr>", response_message); // make header

    for (n = 0; n < k; n++)
    {
        if (S_ISREG(buf[n].st_mode))
            permission[0] = '-'; // regular file-> - 
        else if (S_ISDIR(buf[n].st_mode))
            permission[0] = 'd'; // directory-> d
        else if (S_ISCHR(buf[n].st_mode))
            permission[0] = 'c'; // character special-> c
        else if (S_ISBLK(buf[n].st_mode))
            permission[0] = 'b'; // block special-> b
        else if (S_ISFIFO(buf[n].st_mode))
            permission[0] = 'p'; // FIFO -> p
        else if (S_ISLNK(buf[n].st_mode))
            permission[0] = 'l';
        else if (S_ISSOCK(buf[n].st_mode))
            permission[0] = 's'; // socket-> s

        if (buf[n].st_mode & S_IRUSR)
        {
            permission[1] = 'r'; // owner has read permission
        }
        else
        {
            permission[1] = '-'; // owner has no read permission
        }
        if (buf[n].st_mode & S_IWUSR)
        {
            permission[2] = 'w'; // owner has write permission
        }
        else
        {
            permission[2] = '-'; // owner has no write permission
        }
        if (buf[n].st_mode & S_IXUSR)
        {
            permission[3] = 'x'; // owner has execute permission
        }
        else
        {
            permission[3] = '-'; // owner has no execute permission
        }
        if (buf[n].st_mode & S_IRGRP)
        {
            permission[4] = 'r'; // group has read permission
        }
        else
        {
            permission[4] = '-'; // group has no read permission
        }
        if (buf[n].st_mode & S_IWGRP)
        {
            permission[5] = 'w'; // group has write permission
        }
        else
        {
            permission[5] = '-'; // group has no write permission
        }
        if (buf[n].st_mode & S_IXGRP)
        {
            permission[6] = 'x'; // group has execute permission
        }
        else
        {
            permission[6] = '-'; // group has no execute permission
        }
        if (buf[n].st_mode & S_IROTH)
        {
            permission[7] = 'r'; // others have read permission
        }
        else
        {
            permission[7] = '-'; // others have no read permission
        }
        if (buf[n].st_mode & S_IWOTH)
        {
            permission[8] = 'w'; // others have write permission
        }
        else
        {
            permission[8] = '-'; // others have no write permission
        }
        if (buf[n].st_mode & S_IXOTH)
        {
            permission[9] = 'x'; // others have execute permission
        }
        else
        {
            permission[9] = '-'; // others have no execute permission
        }

        pw = getpwuid(buf[n].st_uid);              // get File Owner's Information
        grp = getgrgid(buf[n].st_gid);             // get the information of the file's owning group
        const time_t *modiTime = &buf[n].st_mtime; // to get the last modified time of that file
        time = localtime(modiTime);                // function for Parsing Time Information

        if (lflag == 1 && aflag == 0) //when root directory
        {
            if (permission[0] == 'd')
            {
                sprintf(response_message, "%s<tr style=\"color:blue\"><td><a href=\"%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // direcotory blue color
            }
            else if (permission[0] == 'l')
            {
                sprintf(response_message, "%s<tr style=\"color:green\"><td><a href=\"%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // link green color
            }
            else
            {
                sprintf(response_message, "%s<tr style=\"color:red\"><td><a href=\"%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // file red color
            }
        }
        else if (lflag == 0 && aflag == 1) //when sub directory
        {
            if (argv[strlen(argv) - 1] == '/') // When the '/' is at the end of the address
            {
                if (permission[0] == 'd')
                {
                    sprintf(response_message, "%s<tr style=\"color:blue\"><td><a href=\"%s%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, argv, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // directory blue color
                }
                else if (permission[0] == 'l')
                {
                    sprintf(response_message, "%s<tr style=\"color:green\"><td><a href=\"%s%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, argv, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // link green color
                }
                else
                {
                    sprintf(response_message, "%s<tr style=\"color:red\"><td><a href=\"%s%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, argv, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // file red color
                }
            }
            else //When there is no '/' at the end of the address
            {
                if (permission[0] == 'd')
                {
                    sprintf(response_message, "%s<tr style=\"color:blue\"><td><a href=\"%s/%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, argv, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // directory blue color
                }
                else if (permission[0] == 'l')
                {
                    sprintf(response_message, "%s<tr style=\"color:green\"><td><a href=\"%s/%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, argv, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // link green color
                }
                else
                {
                    sprintf(response_message, "%s<tr style=\"color:red\"><td><a href=\"%s/%s\">%s</a></td><td>%s</td><td>%li</td><td>%s</td><td>%s</td><td>%li</td><td>%s\t%-d\t%02d : %02d</td></tr>", response_message, argv, file[n], file[n], permission, buf[n].st_nlink, pw->pw_name, grp->gr_name, buf[n].st_size, Month[time->tm_mon], time->tm_mday, time->tm_hour, time->tm_min); // file red color
                }
            }
        }
    }
    sprintf(response_message, "%s</table>", response_message); //close table
}
void bubble_sort(char **file, int n, struct stat buf[]) // define bubble function
{                          
    int i, j;              // initialize value
    struct stat temp_size; 
    for (i = 0; i < n - 1; i++) // Bubble sort the file names alphabetically
    {
        for (j = 0; j < n - i - 1; j++) // if files[j]>files[j+1]
        { 
            if (strcasecmp(file[j], file[j + 1]) > 0)
            {
                char *temp = file[j];
                file[j] = file[j + 1];
                file[j + 1] = temp; // Swap the previous and next elements of an array

                temp_size = buf[j];
                buf[j] = buf[j + 1];
                buf[j + 1] = temp_size; // Swap the previous and next elements of an array
            } // end of if
        } // end of for
    } // end of for
}
void ls_l(char response_message[BUFSIZE],char *argv, DIR *dirp, struct dirent *entry, char **file) // define ls -l function
{
    int lflag = 1;
    int aflag = 0;
    int i = 0;             // initialize value
    int total = 0;         // initialize value
    struct stat buf[4096]; // stat structure that stores information about a file or directory

    char cwd[4096];           // declare cwd
    getcwd(cwd, sizeof(cwd)); // cwd:current directory
    char cwd_copy[4096];
    char cwd_copy_copy[4096];
    strcpy(cwd_copy, cwd); // copy current directory

    if ((dirp = opendir(cwd)) != NULL) // open directory
    {
        while ((entry = readdir(dirp)) != NULL) // read directory
        {
            if (entry->d_name[0] == '.') // do not print hidden files
            {
                continue;
            }
            else
            {
                file[i] = entry->d_name; // store file names
                i++;
            }
        }

        for (int j = 0; j < i; j++)
        {
            strcpy(cwd_copy_copy, cwd_copy); //cwd copy copy=current directory+url
            strcat(cwd_copy_copy, "/"); //cwd copy copy=current directory+url+/
            lstat(strcat(cwd_copy_copy, file[j]), &buf[j]); //get info about current directory+url+/+file
            total += buf[j].st_blocks; // get block size
            memset(cwd_copy_copy, 0, sizeof(cwd_copy_copy)); //initialize cwd_copy_copy
        }

        sprintf(response_message, "<h1>Welcome to System Programming Http</h1><br>"
                      "<B>Directory path : %s<br>"
                      "total %d</B><br>",
                cwd, total / 2); //print directory path & total size
        bubble_sort(file, i, buf);                   // call bubble_sort function
        file_info(response_message,lflag, aflag, argv, i, buf, file); // print file info
    }

    closedir(dirp); // close directory
}
void ls_al(char response_message[BUFSIZE],char *argv, DIR *dirp, struct dirent *entry, char **file) // define ls -alS function
{
    int aflag = 1;
    int lflag = 0;
    int i = 0;             // initialize value
    int n;                 // initialize value
    int total = 0;         // initialize value
    struct stat buf[4096]; // stat structure that stores information about a file or directory
    struct stat check_buf;
    char MIME_type[BUFSIZ];

    char cwd[4096];           // declare cwd
    getcwd(cwd, sizeof(cwd)); // cwd:current directory
    char cwd_copy[4096];
    char cwd_copy_copy[4096];
    strcpy(cwd_copy, cwd); //cwd copy=curernt directory
    strcat(cwd_copy, argv); //cwd copy=current directory+url

    if ((dirp = opendir(cwd_copy)) != NULL) //open directory
    {
        while ((entry = readdir(dirp)) != NULL) //read directory
        {
            file[i] = entry->d_name; //store file list
            i++; // i=how many files in directory
        }

        for (int j = 0; j < i; j++)
        {
            strcpy(cwd_copy_copy, cwd_copy); //cwd copy copy=current directory+url
            strcat(cwd_copy_copy, "/"); //cwd copy copy=current directory+url+/
            lstat(strcat(cwd_copy_copy, file[j]), &buf[j]); //get info about current directory+url+/+file
            total += buf[j].st_blocks; // get block size
            memset(cwd_copy_copy, 0, sizeof(cwd_copy_copy)); //initialize cwd_copy_copy
        }

        sprintf(response_message, "<h2>System Programming Http</h2><br>"
                      "<B>Directory path : %s<br>"
                      "total %d</B><br>",
                        cwd_copy, total / 2); //print directory path & toatl size

        bubble_sort(file, i, buf);                   // call bubble_sort function
        file_info(response_message,lflag, aflag, argv, i, buf, file); // print file info
    }

    closedir(dirp); // close directory
}